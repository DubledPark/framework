<?xml version="1.0" encoding="utf-8"?>
<mx:VBox xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" height="225" xmlns:ui="org.samchon.ui.*">
	
	<fx:Script>
		<![CDATA[
			import mx.charts.HitData;
			import mx.charts.chartClasses.IAxis;
			import mx.charts.series.ColumnSeries;
			import mx.charts.series.items.ColumnSeriesItem;
			import mx.collections.XMLListCollection;
			import mx.events.FlexEvent;
			
			import org.samchon.format.Format;
			import org.samchon.simulation.simulation.backtesting.history.BTHistoryArray;
			import org.samchon.simulation.worker.SimulationWorker;
			
			protected function get worker():SimulationWorker		{	return Root.window.getMovie().getWorker() as SimulationWorker;	}
			protected function get historyArray():BTHistoryArray	{	return worker.getHistoryArray() as BTHistoryArray;				}
			protected function get algorithmList():AlgorithmList	{	return historyArray.getAlgorithmList();							}
			
			[Bindable]protected var parentMovie:BTComparisonMovie;
			[Bindable]protected var xmlListCollection:XMLListCollection = new XMLListCollection();
			
			protected var creationCompleteFlag:Boolean = false;
			protected var $x:int = Global.NULL;
			
			override public function set data(value:Object):void
			{
				var $x:int = value.index.@x;
				if(this.$x != $x)
					xmlListCollection.source = historyArray.toComparisonReturnXMLAt($x).comparison;
				this.$x = $x;
				super.data = value;
			}
			protected function setColumnSeries():void
			{
				parentMovie = this.parentDocument as BTComparisonMovie;
				
				var series:Array = [];
				var columnSeries:ColumnSeries;
				
				for(var i:int = 0; i < algorithmList.length; i++)
				{
					columnSeries = new ColumnSeries();
					columnSeries.displayName = algorithmList.at(i).getName();
					columnSeries.xField = "@label";
					columnSeries.yField = "@algorithm" + i;
					
					series.push( columnSeries );
				}
				columnChart.series = series;
				creationCompleteFlag = true;
			}
			
			protected function dataTipFunction(hitData:HitData):String 
			{
				var columnSeries:ColumnSeries = hitData.element as ColumnSeries;
				var columnSeriesItem:ColumnSeriesItem = hitData.chartItem as ColumnSeriesItem;
				
				var value:String = "<b>" + columnSeries.displayName + "</b>\n";
				value += Format.percentFormat(columnSeriesItem.yFilter);
				
				return value;
			}
			protected function linearAxisLabelFunction(item:Object, prevValue:Object, axis:IAxis) : String 
			{
				return Format.percentFormat( Number(item) );
			}
			
		]]>
	</fx:Script>
	
	<ui:VGroup width="{parentMovie.returnGrid.width - parentMovie.returnGrid.groupedColumns[0].width - 20}" height="100%"
			   padding="10">
		<mx:ColumnChart id="columnChart" 
						dataProvider="{xmlListCollection}" 
						creationComplete="setColumnSeries()"
						showDataTips="true" dataTipMode="multiple" 
						dataTipFunction="dataTipFunction"
						
						width="100%" height="100%">
			<mx:horizontalAxis>
				<mx:CategoryAxis id="categoryAxis" categoryField="@label"/>
			</mx:horizontalAxis>
			<mx:verticalAxis>
				<mx:LinearAxis labelFunction="linearAxisLabelFunction" />
			</mx:verticalAxis>
		</mx:ColumnChart>
		<mx:Legend id="legend" dataProvider="{columnChart}" width="100%" height="25" />
	</ui:VGroup>
</mx:VBox>

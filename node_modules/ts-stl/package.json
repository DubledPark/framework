{
  "name": "ts-stl",
  "description": "TypeScript-STL (Standard Template Library, migrated from C++)",
  "author": {
    "name": "Jeongho Nam",
    "email": "samchon@samchon.org",
    "url": "http://samchon.org"
  },
  "version": "0.9.5",
  "main": "./lib/ts-stl.js",
  "typings": "./lib/ts-stl.d.ts",
  "homepage": "https://github.com/samchon/stl",
  "repository": {
    "type": "git",
    "url": "https://github.com/samchon/stl.git"
  },
  "bugs": {
    "url": "https://github.com/samchon/stl/issues"
  },
  "licenses": [
    {
      "type": "BSD 3-Clause",
      "url": "https://opensource.org/licenses/BSD-3-Clause"
    }
  ],
  "keywords": [
    "stl",
    "standard template library",
    "typescript",
    "standard",
    "template",
    "container",
    "library",
    "vector",
    "deque",
    "list",
    "queue",
    "stack",
    "hash",
    "tree",
    "iterator"
  ],
  "readme": "STL for TypeScript\r\n=========\r\nSTL (Standard Template Library) and Containers for TypeScript\r\n\r\n## References\r\n##### Homepages\r\n- Formal Homepage: http://samchon.github.io/stl\r\n- API Documents: http://samchon.github.io/stl/api\r\n\r\n##### Projects using STL for TypeScript\r\n- Samchon Framework: https://github.com/samchon/framework\r\n- Packer: https://github.com/betterwaysystems/packer\r\n- Samchon UML: https://github.com/samchon/uml\r\n\r\n## Programming\r\n##### Containers\r\n- [Linear containers](http://samchon.github.io/stl/api/interfaces/std.base.container.ilinearcontainer.html)\r\n    - [Vector](http://samchon.github.io/stl/api/classes/std.vector.html)\r\n    - [List](http://samchon.github.io/stl/api/classes/std.list.html)\r\n    - [Deque](http://samchon.github.io/stl/api/classes/std.deque.html)\r\n- [Tree-structured containers](http://samchon.github.io/stl/api/classes/std.base.tree.rbtree.html)\r\n    - [TreeSet](http://samchon.github.io/stl/api/classes/std.treeset.html)\r\n    - [TreeMap](http://samchon.github.io/stl/api/classes/std.treemap.html)\r\n    - [TreeMultiSet](http://samchon.github.io/stl/api/classes/std.treemultiset.html)\r\n    - [TreeMultiMap](http://samchon.github.io/stl/api/classes/std.treemultimap.html)\r\n- [Hashed containers](http://samchon.github.io/stl/api/classes/std.base.hash.hashbuckets.html)\r\n    - [HashSet](http://samchon.github.io/stl/api/classes/std.hashset.html)\r\n    - [HashMap](http://samchon.github.io/stl/api/classes/std.hashmap.html)\r\n    - [HashMultiSet](http://samchon.github.io/stl/api/classes/std.hashmultiset.html)\r\n    - [HashMultiMap](http://samchon.github.io/stl/api/classes/std.hashmultimap.html)\r\n- Etc.\r\n    - [Queue](http://samchon.github.io/stl/api/classes/std.queue.html)\r\n    - [Stack](http://samchon.github.io/stl/api/classes/std.stack.html)\r\n    - [PriorityQueue](http://samchon.github.io/stl/api/classes/std.priorityqueue.html)\r\n\r\n##### Usage\r\n```typescript\r\nnamespace std.test\r\n{\r\n\texport function hash_map(): void\r\n\t{\r\n\t\t/////////////////////////////////////\r\n\t\t// CONSTRUCT DATA FROM 1 TO 10\r\n\t\t/////////////////////////////////////\r\n\t\tlet map: std.HashMap<number, string> = new std.HashMap<number, string>();\r\n\t\tfor (let i: number = 0; i < 10; i++)\r\n\t\t\tmap.set(i, \"Its key is \" + i);\r\n\r\n\t\t/////////////////////////////////////\r\n\t\t//  ELEMENT I/O\r\n\t\t/////////////////////////////////////\r\n\t\t// ERASE AN ELEMENT\r\n\t\tlet it = map.find(3); // find 3.\r\n\t\tit = map.erase(it); // erase 3. [it] points key 4.\r\n\t\tconsole.log(it.first); // prints key 4.\r\n\r\n\t\t// INSERT AN ELEMENT\r\n\t\tit = map.begin().advance(2) // [it] points key 2 (0 ----> 2)\r\n\t\tit = map.insert(it, new std.Pair<number, string>(-1, \"Its key is -1\"));\r\n\t\t// [it] points key -1=\r\n\t\t// key list: [0, 1, -1, 2, 4, 5, 6, 7, 8, 9]\r\n\t\tconsole.log(it.next().first); // prints 2, next of [it] (-1 -> 2)\r\n\r\n\t\t// RANGE ERASER\r\n\t\tit = map.erase(map.begin().advance(6), map.begin().advance(9));\r\n\t\t// erase elements from 6th until 9th.\r\n\r\n\t\t// INSPECT ELEMENTS BY THEIR KEY\r\n\t\t// key list: [0, 1, -1, 2, 4, 5, 9]\r\n\t\tconsole.log(\"has 7:\", map.has(7));\r\n\t\tconsole.log(\"count 5:\", map.count(5));\r\n\t\tconsole.log(\"it is end():\", it.equals(map.end()));\r\n\r\n\t\t/////////////////////////////////////\r\n\t\t// PRINT ALL ELEMENTS\r\n\t\t/////////////////////////////////////\r\n\t\tconsole.log(\"------------------------------\");\r\n\r\n\t\t// key list: [0, 1, -1, 2, 4, 5, 9]\r\n\t\tfor (let it = map.begin(); !it.equals(map.end()); it = it.next())\r\n\t\t\tconsole.log(it.second);\r\n\r\n\t\t/* OUTPUT\r\n\t\t=========================================\r\n\t\t\t4\r\n\t\t\t2\r\n\t\t\thas 7: true\r\n\t\t\tcount 5: 1\r\n\t\t\tit is end(): false\r\n\t\t\t------------------------------\r\n\t\t\tIts key is 0\r\n\t\t\tIts key is 1\r\n\t\t\tIts key is -1\r\n\t\t\tIts key is 2\r\n\t\t\tIts key is 4\r\n\t\t\tIts key is 5\r\n\t\t\tIts key is 9\r\n\t\t=========================================\r\n\t\t*/\r\n\t}\r\n}\r\n```\r\n\r\n``` typescript\r\nnamespace std.test\r\n{\r\n\texport function sorting(): void\r\n\t{\r\n\t\tlet cubeList: std.List<Cube> = new std.List<Cube>();\r\n\t\tfor (let i: number = 0; i < 10; i++)\r\n\t\t\tcubeList.pushBack(new Cube());\r\n\r\n\t\t///////////////////////////////\r\n\t\t// SORT BY Cube.less()\r\n\t\t///////////////////////////////\r\n\t\tstd.sort(cubeList.begin(), cubeList.end());\r\n\r\n\t\tfor (let it = cubeList.begin(); !it.equals(cubeList.end()); it = it.next())\r\n\t\t\tit.value.debug_size();\r\n\r\n\t\tconsole.log(\"------------------------------\");\r\n\r\n\t\t///////////////////////////////\r\n\t\t// SORT BY inline function\r\n\t\t///////////////////////////////\r\n\t\tstd.sort(cubeList.begin(), cubeList.end(),\r\n\t\t\tfunction (left: Cube, right: Cube): boolean\r\n\t\t\t{\r\n\t\t\t\tif (left.x != right.x) return left.x < right.x;\r\n\t\t\t\telse if (left.y != right.y) return left.y < right.y;\r\n\t\t\t\telse return left.z < right.z;\r\n\t\t\t}\r\n\t\t);\r\n\r\n\t\tfor (let it = cubeList.begin(); !it.equals(cubeList.end()); it = it.next())\r\n\t\t\tit.value.debug_position();\r\n\t}\r\n\r\n\tclass Cube\r\n\t{\r\n\t\tpublic width: number;\r\n\t\tpublic height: number;\r\n\t\tpublic length: number;\r\n\t\tpublic x: number;\r\n\t\tpublic y: number;\r\n\t\tpublic z: number;\r\n\r\n\t\tpublic constructor()\r\n\t\t{\r\n\t\t\tthis.width = Math.random() * 10;\r\n\t\t\tthis.height = Math.random() * 10;\r\n\t\t\tthis.length = Math.random() * 10;\r\n\t\t\tthis.x = Math.random() * 100 - 50;\r\n\t\t\tthis.y = Math.random() * 100 - 50;\r\n\t\t\tthis.z = Math.random() * 100 - 50;\r\n\t\t}\r\n\t\tpublic get volume(): number\r\n\t\t{\r\n\t\t\treturn this.width * this.height * this.length;\r\n\t\t}\r\n\r\n\t\tpublic less(obj: Cube): boolean\r\n\t\t{\r\n\t\t\treturn this.volume < obj.volume;\r\n\t\t}\r\n\r\n\t\tpublic debug_size(): void\r\n\t\t{\r\n\t\t\tconsole.log(this.width, this.height, this.length + \" => \" + this.volume);\r\n\t\t}\r\n\t\tpublic debug_position(): void\r\n\t\t{\r\n\t\t\tconsole.log(this.x, this.y, this.z);\r\n\t\t}\r\n\t}\r\n}\r\n```\r\n\r\n``` typescript\r\nnamespace std.test\r\n{\r\n\texport function tree_set(): void\r\n\t{\r\n\t\tlet intSet: std.TreeMultiSet<number> = new std.TreeMultiSet<number>();\r\n\r\n\t\t// INSERTS EVEN NUMBERS\r\n\t\tfor (let i = 0; i <= 10; i += 2)\r\n\t\t\tfor (let j = 0; j < 3; j++)\r\n\t\t\t\tintSet.insert(i);\r\n\r\n\t\t// FIND 4 -> HAS\r\n\t\tconsole.log(\"Matched node: 4\");\r\n\t\tconsole.log(\"\tlower bound: \" + intSet.lowerBound(4).value);\r\n\t\tconsole.log(\"\tupper bound: \" + intSet.upperBound(4).value);\r\n\t\tconsole.log(\" \");\r\n\r\n\t\t// FIND ODD NUMBERS -> NOT EXIST\r\n\t\tfor (let i = 1; i <= 10; i += 2)\r\n\t\t{\r\n\t\t\tconsole.log(\"Mis-matched node: \" + i);\r\n\t\t\tconsole.log(\"\tlower bound: \" + intSet.lowerBound(i).value);\r\n\t\t\tconsole.log(\"\tupper bound: \" + intSet.upperBound(i).value);\r\n\t\t\tconsole.log(\" \");\r\n\t\t}\r\n\t}\r\n}\r\n```\r\n\r\n## License\r\n##### BSD v3 License\r\nCopyright (c) 2016, Jeongho Nam\r\nAll rights reserved.\r\n\r\nRedistribution and use in source and binary forms, with or without\r\nmodification, are permitted provided that the following conditions are met:\r\n\r\n* Redistributions of source code must retain the above copyright notice, this\r\n  list of conditions and the following disclaimer.\r\n\r\n* Redistributions in binary form must reproduce the above copyright notice,\r\n  this list of conditions and the following disclaimer in the documentation\r\n  and/or other materials provided with the distribution.\r\n\r\n* Neither the name of stl nor the names of its\r\n  contributors may be used to endorse or promote products derived from\r\n  this software without specific prior written permission.\r\n\r\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\r\nAND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\r\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\r\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\r\nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\r\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\r\nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\r\nCAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\r\nOR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\r\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\r\n",
  "readmeFilename": "README.md",
  "_id": "ts-stl@0.9.5",
  "_shasum": "c407c5e954a1932ec05d52902189904cd70264fc",
  "_from": "ts-stl@0.9.5",
  "_resolved": "https://registry.npmjs.org/ts-stl/-/ts-stl-0.9.5.tgz"
}

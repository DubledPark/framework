SET 
  ANSI_NULLS, 
  QUOTED_IDENTIFIER, 
  CONCAT_NULL_YIELDS_NULL, 
  ANSI_WARNINGS, 
  ANSI_PADDING 
ON;

USE OraQ;
IF (OBJECT_ID('mergeFileServer') IS NOT NULL)				DROP PROCEDURE mergeFileServer
IF (TYPE_ID('FILE_SERVER_MERGE_TABLE') IS NOT NULL)			DROP TYPE FILE_SERVER_MERGE_TABLE
IF (TYPE_ID('FILE_SERVER_ROLE_MERGE_TABLE') IS NOT NULL)	DROP TYPE FILE_SERVER_ROLE_MERGE_TABLE
GO

CREATE TYPE FILE_SERVER_MERGE_TABLE AS TABLE
(
	name NVARCHAR(100) PRIMARY KEY,
	aeTitle NVARCHAR(100),
	ip NVARCHAR(100),
	port INT,
	
	id NVARCHAR(100),
	pass NVARCHAR(100),
	path NVARCHAR(100)
)
GO
CREATE TYPE FILE_SERVER_ROLE_MERGE_TABLE AS TABLE
(
	name NVARCHAR(100),
	extension NVARCHAR(100) PRIMARY KEY
)
GO

CREATE PROCEDURE mergeFileServer
	@serverTable FILE_SERVER_MERGE_TABLE READONLY,
	@roleTable FILE_SERVER_ROLE_MERGE_TABLE READONLY
AS
	--DELETE NOT INCLUDED IN PARAMETER TABLE
	DELETE FROM Server.fileServer
		WHERE name NOT IN (SELECT name FROM @serverTable);
	DELETE FROM Server.fileServerRole
		WHERE extension NOT IN (SELECT extension FROM @roleTable);

	--INSERT OR REPLACE INTO EXTERNAL_SERVER
	MERGE Server.externalServer E
		USING @serverTable T
			ON E.name = T.name
	WHEN MATCHED THEN
		UPDATE SET E.aeTitle = T.aeTitle, E.ip = T.ip, E.port = T.port
	WHEN NOT MATCHED THEN
		INSERT VALUES (T.name, T.aeTitle, T.ip, T.port);

	--INSERT OR REPLACE INTO FILE_SERVER
	MERGE Server.fileServer F
		USING @serverTable T
			ON F.name = T.name
	WHEN MATCHED THEN
		UPDATE SET F.id = T.id, F.pass = T.pass, F.path = T.path
	WHEN NOT MATCHED THEN
		INSERT VALUES (T.name, T.id, T.pass, T.path);

	--INSERT OR REPLACE INTO FILE_SERVER_ROLE
	MERGE Server.fileServerRole R
		USING @roleTable T
			ON (R.extension = T.extension)
	WHEN MATCHED THEN
		UPDATE SET name = T.name
	WHEN NOT MATCHED THEN
		INSERT VALUES (T.name, T.extension);
GO
<?xml version="1.0" encoding="utf-8"?>
<ui:VGroup xmlns:fx="http://ns.adobe.com/mxml/2009" 
		   xmlns:s="library://ns.adobe.com/flex/spark" 
		   xmlns:mx="library://ns.adobe.com/flex/mx" 
		   xmlns:ui="org.samchon.ui.*"
		   xmlns:price="org.samchon.simulation.inquiry.price.*"
		   xmlns:minimap="org.samchon.ui.chart.minimap.*">
	<fx:Declarations>
		<s:ArrayCollection id="subSeriesTitleList">
			<fx:Object label="Volume" data="volume" />
			<fx:Object label="Disparity" data="disparity" />
			<fx:Object label="CCI" data="cci" />
			<fx:Object label="OBV" data="obv" />
			<fx:Object label="VR" data="vr" />
			<fx:Object label="PL" data="pl" />
			<fx:Object label="Stochastic" data="stochastics" />
			<fx:Object label="MACD Oscillator" data="macd" />
		</s:ArrayCollection>
	</fx:Declarations>
	<fx:Script>
		<![CDATA[
			import mx.charts.ChartItem;
			import mx.charts.HitData;
			import mx.charts.series.AreaSeries;
			import mx.charts.series.CandlestickSeries;
			import mx.charts.series.ColumnSeries;
			import mx.charts.series.LineSeries;
			import mx.charts.series.items.HLOCSeriesItem;
			import mx.collections.ListCollectionView;
			import mx.collections.XMLListCollection;
			import mx.controls.List;
			import mx.events.FlexEvent;
			import mx.graphics.IFill;
			import mx.graphics.SolidColor;
			import mx.graphics.SolidColorStroke;
			
			import org.samchon.ui.chart.minimap.MinimapSubChart;
			import org.samchon.ui.chart.minimap.MinimapSubChartEvent;
			import org.samchon.format.Format;
			import org.samchon.ui.series.MASeries;
			import org.samchon.utils.Color;
			
			import spark.events.IndexChangeEvent;
			
			/*
			==============================================
			CREATION
			==============================================
			*/
			protected function creationCompleted(event:FlexEvent):void {
				event.target.removeEventListener(FlexEvent.CREATION_COMPLETE, creationCompleted);
				setSeries();
				setSubSeries();
				
				subSeriesMain();
			}
			protected function subSeriesMain():void {
				addSubChartAt(0);
				buttonBar.selectedIndex = 0;
			}
			
			/*
			==============================================
				DATA
			==============================================
			*/
			public function set source(xmlList:XMLList):void {
				var xmlListCollection:XMLListCollection = new XMLListCollection( xmlList );
				this.dataProvider = xmlListCollection;
			}
			public function set dataProvider(listCollection:ListCollectionView):void {
				minimapChart.dataProvider = listCollection;
			}
			
			protected function dataTipFunction(hitData:HitData):String {
				var candle:Object = hitData.item;
				var str:String = 
					"<b>" + candle.@date + "</b>\n" +
					"Price Information\n" + 
					"		close(X)		:	"	+ Format.numberFormat(candle.@close		)			+ "\n" +
					"		open(O)		:	"		+ Format.numberFormat(candle.@open		)			+ "\n" +
					"		high(▼)		:	"		+ Format.numberFormat(candle.@low		)			+ "\n" +
					"		low(▲)			:	"	+ Format.numberFormat(candle.@high		)			+ "\n" +
					"		volume		:	"		+ Format.numberFormat(candle.@volume		)			+ "\n" +
					"\n" +
					"Moving Average\n" +
					"		MA   5			:	"	+ Format.numberFormat(candle.@ma5 		)	+	maTab(candle.@ma5  )	+ 	"("	+	Format.percentFormat(candle.@disparity5	) + ")\n" +
					"		MA   20		:	"		+ Format.numberFormat(candle.@ma20		)	+	maTab(candle.@ma20 )	+ 	"("	+	Format.percentFormat(candle.@disparity20	) + ")\n" +
					"		MA   60		:	"		+ Format.numberFormat(candle.@ma60		)	+	maTab(candle.@ma60 )	+ 	"("	+	Format.percentFormat(candle.@disparity60	) + ")\n" +
					"		MA 120		:	"		+ Format.numberFormat(candle.@ma120		)	+	maTab(candle.@ma120)	+ 	"("	+	Format.percentFormat(candle.@disparity120) + ")\n" +
					"		MA 200		:	"		+ Format.numberFormat(candle.@ma200		)	+	maTab(candle.@ma200)	+ 	"("	+	Format.percentFormat(candle.@disparity200) + ")\n";
				
				str +=
					"\n" +
					"Technical Index\n" +
					"		OBV			:	"		+ Format.numberFormat (candle.@obv			) 	+ "\n" +
					"		CCI			:	"		+ Format.numberFormat (candle.@cci			)	+ "\n" +
					"		VR 			:	"		+ Format.percentFormat(candle.@vr				)	+ "\n" +
					"		PL 			:	"		+ Format.percentFormat(candle.@pl				)	+ "\n" +
					"		%K			:	"		+ Format.percentFormat(candle.@stochasticsK	)	+ "\n" +
					"		%D			:	"		+ Format.percentFormat(candle.@stochasticsD	)	+ "\n" +
					"		MACD			:	"	+ Format.numberFormat (candle.@macd			)	+ "\n" +
					"		MACD Line	:	"		+ Format.numberFormat (candle.@macdLine		)	+ "\n";
				
				return str;
			}
			protected function maTab(value:Number):String {
				var tab:String = "";
				
				var log10:Number = Math.log(value) / Math.log(10.0);
				var unit:int = int(log10) / 2;
				
				for(var i:int = 4 - unit; i > 0; i--)
					tab += "\t";
				
				if(Math.floor(value) == value)
					tab += "\t";
				
				return tab;
			}
			protected function maTabInt(value:Number):int {
				var log10:Number = Math.log(value) / Math.log(10.0);
				var unit:int = int(log10) / 2;
				
				return unit;
			}
			
			/*
			==============================================
			SERIES - SUB CHART
			==============================================
			*/
			protected var subSeriesMap:Dictionary = new Dictionary();
			[Bindable]protected static var greenAreaFill:SolidColor = new SolidColor(Color.GREEN, .75);
			
			
			protected function setSeries():void {
				//CANDLE SERIES
				var candleSeries:CandlestickSeries = new CandlestickSeries();
				candleSeries.highField = "@high";
				candleSeries.lowField = "@low";
				candleSeries.openField = "@open";
				candleSeries.closeField = "@close";
				candleSeries.fillFunction = candleFill;
				
				//MOVING AVERAGE SERIES
				var colorArray:Vector.<uint> = new Vector.<uint>();
				var dayArray:Vector.<int> = new Vector.<int>();
				var maSeries:LineSeries;
				var stroke:SolidColorStroke;
				
				//MINIMAP SERIES
				var areaSeries:AreaSeries = new AreaSeries();
				areaSeries.xField = "@date";
				areaSeries.yField = "@close";
				areaSeries.setStyle("areaFill", greenAreaFill);
				
				//FINALLY ADJUST
				minimapChart.mainSeries = 
				[
					candleSeries,
					new MASeries(5),
					new MASeries(20),
					new MASeries(60),
					new MASeries(120),
					new MASeries(200)
				];
				minimapChart.minimapSeries = [areaSeries];
			}
			protected function setSubSeries():void {
				var labels:Array = 
					[	
						//"volume", 
						"disparity5", "disparity20", "disparity60", "disparity120", "disparity200",
						"cci", "obv", "vr", "pl", "stochasticsK", "stochasticsD",
						"macd", "macdLine"
					];
				//VOLUME
				var volumeSeries:ColumnSeries = new ColumnSeries();
				volumeSeries.xField = "@date";
				volumeSeries.yField = "@volume";
				volumeSeries.displayName = "volume";
				volumeSeries.setStyle( "fill", new SolidColor(Color.BLACK, .5) );
				
				subSeriesMap["volume"] = volumeSeries;
				
				//OTHER LINES
				var lineSeries:LineSeries;
				var color:int;
				for(var i:int = 0; i < labels.length; i++) {
					switch( labels[i] ) {
						case "disparity5":
							color = Color.GREEN;
							break;
						case "disparity20":
						case "stochasticsK":
						case "macd":
							color = Color.RED;
							break;
						case "disparity60":
						case "stochasticsD":
						case "macdLine":
							color = Color.BLUE;
							break;
						case "disparity120":
							color = Color.PURPLE;
							break;
							break;
						default:
							color = Color.BLACK;
							break;
					}
					lineSeries = new LineSeries();
					lineSeries.xField = "@date";
					lineSeries.yField = "@" + labels[i];
					lineSeries.displayName = labels[i];
					lineSeries.setStyle( "lineStroke", new SolidColorStroke(color, 1, .5) );
					
					//TO MAP
					subSeriesMap[ labels[i] ] = lineSeries;
				}
			}
			protected function candleFill(item:ChartItem, index:Number):IFill {
				var curItem:HLOCSeriesItem = item as HLOCSeriesItem;
				if (curItem.closeValue > curItem.openValue)
					return new SolidColor(Color.RED, .75);
				else
					return new SolidColor(Color.BLUE, .75);
			}
			
			protected function addSubChartAt(x:int):void {
				if(x < 0)
					return;
				
				var minimapSubChart:MinimapSubChart = new MinimapSubChart();
				minimapSubChart.title = subSeriesTitleList[x].label;
				
				var series:Array;
				switch( subSeriesTitleList[x].data ) {
					case "volume":
						series = [subSeriesMap.volume];
						break;
					case "disparity":
						series = [subSeriesMap.disparity5, subSeriesMap.disparity20, subSeriesMap.disparity60, subSeriesMap.disparity120, subSeriesMap.disparity200];
						break;
					case "cci":
						series = [subSeriesMap.cci];
						break;
					case "obv":
						series = [subSeriesMap.obv];
						break;
					case "vr":
						series = [subSeriesMap.vr];
						break;
					case "pl":
						series = [subSeriesMap.pl];
						break;
					case "stochastics":
						series = [subSeriesMap.stochasticsK, subSeriesMap.stochasticsD];
						break;
					case "macd":
						series = [subSeriesMap.macd, subSeriesMap.macdLine];
						break;
				}
				minimapSubChart.categoryField = "@date";
				minimapSubChart.series = series;
				minimapSubChart.addEventListener(MinimapSubChartEvent.REMOVE_ACTIVATE, handleSubChartRemoveActivated);
				minimapChart.addSubChart( minimapSubChart );
			}
			protected function removeSubChartAt(x:int):void {
				for(var i:int = 0; i < minimapChart.length; i++)
					if( subSeriesTitleList[x].label == minimapChart.getSubChartAt(i).title ) {
						minimapChart.removeSubChartAt(i);
						break;
					}
			}
			protected function handleSubChartRemoveActivated(event:MinimapSubChartEvent):void {
				var title:String = event.chart.title;
				for(var i:int = 0; i < subSeriesTitleList.length; i++)
					if(title == subSeriesTitleList[i].label)
						break;
				buttonBar.removeSelectionAt(i);
			}
			
			protected function buttonBarChanged(event:IndexChangeEvent):void {
				if(buttonBar.removedIndex != -1) 
					//제거에 해당
					removeSubChartAt(buttonBar.removedIndex);
				else 
					//추가에 해당
					addSubChartAt( event.newIndex );
			}
			
		]]>
	</fx:Script>
	<ui:ButtonBar id="buttonBar"
				  dataProvider="{subSeriesTitleList}"
				  change="buttonBarChanged(event)"
				  allowMultipleSelection="true" />
	
	<s:HGroup width="100%" gap="10" horizontalAlign="right">
		<s:Label color="green" text="5일 이평선" />
		<s:Label color="red" text="20일 이평선" />
		<s:Label color="blue" text="60일 이평선" />
		<s:Label color="purple" text="120일 이평선" />
		<s:Label color="gray" text="200일 이평선" />
	</s:HGroup>
	<minimap:MinimapChart id="minimapChart" 
						  categoryField="@date"
						  creationComplete="creationCompleted(event)"
						  dataTipFunction="dataTipFunction"
						  width="100%" height="100%" />
</ui:VGroup>
SET 
  ANSI_NULLS, 
  QUOTED_IDENTIFIER, 
  CONCAT_NULL_YIELDS_NULL, 
  ANSI_WARNINGS, 
  ANSI_PADDING 
ON;

USE OraQ;
IF (OBJECT_ID('mergePACSServer') IS NOT NULL)				DROP PROCEDURE mergePACSServer
IF (TYPE_ID('PACS_SERVER_MERGE_TABLE') IS NOT NULL)			DROP TYPE PACS_SERVER_MERGE_TABLE
IF (TYPE_ID('PACS_SERVER_ROLE_MERGE_TABLE') IS NOT NULL)	DROP TYPE PACS_SERVER_ROLE_MERGE_TABLE
GO

CREATE TYPE PACS_SERVER_MERGE_TABLE AS TABLE
(
	name NVARCHAR(100) PRIMARY KEY,
	aeTitle NVARCHAR(100),
	ip NVARCHAR(100),
	port INT
)
GO
CREATE TYPE PACS_SERVER_ROLE_MERGE_TABLE AS TABLE
(
	name NVARCHAR(100),
	modality NVARCHAR(100),
	frameMode TINYINT

	PRIMARY KEY(modality, frameMode)
)
GO

CREATE PROCEDURE mergePACSServer
	@serverTable PACS_SERVER_MERGE_TABLE READONLY,
	@roleTable PACS_SERVER_ROLE_MERGE_TABLE READONLY
AS
	DECLARE @totalRoleSize INT;
	DECLARE @realRoleSize INT;

	--DELETE NOT INCLUDED IN PARAMETER TABLE
	DELETE FROM Server.pacsServer
		WHERE name NOT IN (SELECT name FROM @serverTable);
	DELETE O 
	FROM Server.pacsServerRole O
	WHERE NOT EXISTS
	(
		SELECT modality, frameMode FROM @roleTable N
		WHERE O.modality = N.modality AND O.frameMode = N.frameMode
	);

	--INSERT OR REPLACE INTO EXTERNAL_SERVER
	MERGE Server.externalServer E
		USING @serverTable T
			ON E.name = T.name
	WHEN MATCHED THEN
		UPDATE SET E.aeTitle = T.aeTitle, E.ip = T.ip, E.port = T.port
	WHEN NOT MATCHED THEN
		INSERT VALUES (T.name, T.aeTitle, T.ip, T.port);

	--INSERT OR REPLACE INTO PACS_SERVER
	MERGE Server.pacsServer P
		USING @serverTable T
			ON P.name = T.name
	WHEN NOT MATCHED THEN
		INSERT VALUES (T.name);

	--INSERT OR REPLACE INTO PACS_SERVER_ROLE
	MERGE Server.pacsServerRole R
		USING @roleTable T
			ON (R.modality = T.modality AND R.frameMode = T.frameMode)
	WHEN MATCHED THEN
		UPDATE SET name = T.name
	WHEN NOT MATCHED THEN
		INSERT VALUES (T.name, T.modality, T.frameMode);
GO
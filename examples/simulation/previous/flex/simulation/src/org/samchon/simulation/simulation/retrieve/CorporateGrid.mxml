<?xml version="1.0" encoding="utf-8"?>
<s:Panel xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx"
		 xmlns:ui="org.samchon.ui.*" 
		 
		 width="300" height="100%"
		 
		 creationComplete="creationCompleted(event)" 
		 title="Corporate List">
	
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
		<s:ArrayCollection id="fieldList">
			<fx:Object label="Name" data="name"/>
			<fx:Object label="Code" data="code"/>
		</s:ArrayCollection>
	</fx:Declarations>
	<fx:Declarations>
		<s:RadioButtonGroup id="orderGroup" change="orderChanged(event)" />
	</fx:Declarations>
	
	<fx:Script>
		<![CDATA[
			import mx.collections.Sort;
			import mx.collections.SortField;
			import mx.collections.XMLListCollection;
			import mx.controls.Alert;
			import mx.events.DragEvent;
			import mx.events.FlexEvent;
			import mx.events.ListEvent;
			import mx.managers.PopUpManager;
			
			import org.samchon.simulation.accessory.InquiryProgressMovie;
			import org.samchon.socket.HTTPService;
			
			[Bindable]protected var arrayCollection:ArrayCollection = new ArrayCollection();;
			protected var creationCompleteFlag:Boolean = false;
			
			protected function creationCompleted(event:FlexEvent):void
			{
				// TODO Auto-generated method stub
				this.removeEventListener(FlexEvent.CREATION_COMPLETE, creationCompleted);
				creationCompleteFlag = true;
				
				//FLAG
				if(_allowMultipleSelection)		this.allowMultipleSelection = _allowMultipleSelection;
				if(_doubleClickEnabled)			this.doubleClickEnabled = _doubleClickEnabled;
				if(_dragEnabled)				this.dragEnabled = _dragEnabled;
				
				//FUNCTION
				if(_change != null)				this.change = _change;
				if(_itemDoubleClick != null)	this.itemDoubleClick = _itemDoubleClick;
				
				httpService.addEventListener(Event.COMPLETE, handleCorporateList);
				goCorporateList();
			}
			protected function dragStartHandler(event:DragEvent):void {
				for(var i:int = 0; i < this.selectedItems.length; i++)
					if(this.selectedItems[i].hasOwnProperty("@code") == false) {
						//event.stopImmediatePropagation();
						return;
					}
			}
			protected function orderChanged(event:Event):void
			{
				var field:String = orderGroup.selectedValue as String;
				
				if(field == "name")
				{
					Corporate(arrayCollection[0]).orderByName();
					Corporate(arrayCollection[1]).orderByName();
				}
				else if(field == "marketCap")
				{
					Corporate(arrayCollection[0]).orderByMarketCap();
					Corporate(arrayCollection[1]).orderByMarketCap();
				}
				arrayCollection.addItem(null);
				arrayCollection.removeItemAt( arrayCollection.length - 1 );
			}
			
			/* ------------------------------------------------------------------------
				SOCKET
			------------------------------------------------------------------------ */
			protected var httpService:HTTPService = new HTTPService(URL.CORPORATE_LIST);
			
			public function goCorporateList(field:String = null, value:String = null):void 
			{
				this.enabled = false;
				
				var formData:Object = new Object();
				if(field)	formData.field = field;
				if(value)	formData.value = value;
				
				httpService.send(formData);
			}
			protected function handleCorporateList(event:Event):void {
				this.enabled = true;
				constructCorporateList(event.target.data);
			}
			public function constructCorporateList(data:String):void
			{
				var xml:XML = new XML(data);
				var xmlList:XMLList = xml.corporate;
				var childXMLList:XMLList;
				
				var array:Array = [];
				var marketCorporate:Corporate;
				
				var corporate:Corporate;
				var code:String;
				var name:String;
				var market:int;
				var price:Number;
				var yesterday:Number;
				var volume:Number;
				
				for(var i:int = 0; i < xmlList.length(); i++)
				{
					childXMLList = xmlList[i].corporate;
					marketCorporate = new Corporate(null, xmlList[i].@name, xmlList[i].@market);
					
					for(var j:int = 0; j < childXMLList.length(); j++)
					{
						code = childXMLList[j].@code;
						name = childXMLList[j].@name;
						market = childXMLList[j].@market;
						price = childXMLList[j].@price;
						yesterday = childXMLList[j].@yesterday;
						volume = childXMLList[j].@volume;
						
						corporate = new Corporate(code, name, market, price, yesterday, volume);
						marketCorporate.addItem( corporate );
					}
					array.push(marketCorporate);
				}
				
				//xmlListCollection.source = xml.corporate;
				arrayCollection.source = array;
				advDg.expandAll();
				
				orderChanged(null);
			}
			
			/* ------------------------------------------------------------------------
				SET METHOD
			------------------------------------------------------------------------ */
			protected var _change:Function = null;
			protected var _itemDoubleClick:Function = null;
			
			protected var _allowMultipleSelection:Boolean = false;
			protected var _doubleClickEnabled:Boolean = false;
			protected var _dragEnabled:Boolean = false;
			
			public function set change(func:Function):void {
				if(creationCompleteFlag)	advDg.addEventListener(ListEvent.CHANGE, func);
				else						_change = func;
			}
			public function set itemDoubleClick(func:Function):void {
				if(creationCompleteFlag)	advDg.addEventListener(ListEvent.ITEM_DOUBLE_CLICK, func);
				else						_itemDoubleClick = func;
			}
			
			public function set allowMultipleSelection(flag:Boolean):void {
				if(creationCompleteFlag)	advDg.allowMultipleSelection = flag;
				else						_allowMultipleSelection = flag;
			}
			public override function set doubleClickEnabled(flag:Boolean):void {
				if(creationCompleteFlag)	advDg.doubleClickEnabled = flag;
				else						_doubleClickEnabled = flag;
			}
			public function set dragEnabled(flag:Boolean):void {
				if(creationCompleteFlag)	advDg.dragEnabled = flag;
				else						_dragEnabled = flag;
			}
			
			/* ------------------------------------------------------------------------
				GET METHOD
			------------------------------------------------------------------------ */
			public function get selectedItem():Object {
				return advDg.selectedItem;
			}
			public function get selectedItems():Array {
				return this.selectedCorporates.source;
			}
			
			public function get selectedCorporate():Corporate
			{
				var corp:Corporate = advDg.selectedItem as Corporate;
				
				if(advDg.selectedItems.length > 1 || corp.getCode() == null)
					return null;
				else
					return corp;
			}
			public function get selectedCorporates():CorporateList
			{
				var selectedItems:Array = advDg.selectedItems;
				var corporateList:CorporateList = new CorporateList();
				var corp:Corporate;
				
				for(var i:int = 0; i < selectedItems.length; i++)
				{
					corp = selectedItems[i] as Corporate;
					
					//선택한 것이 코스피, 코스닥인 경우, 그 밑의 회사들을 전부 추가함
					if(corp.getCode() == null)
						for(var j:int = 0; j < corp.length; j++)
							corporateList.addItem( corp );
					else
						corporateList.addItem( corp );
				}
				corporateList.sort();
				return corporateList;
			}
			public function get selectedXML():XML {
				return new XML(selectedCorporates.toXML());
			}
			
			/* ------------------------------------------------------------------------
				SET VISIBLE -> POP
			------------------------------------------------------------------------ */
			public var window:*;
			protected function get contentHGroup():spark.components.HGroup	{	return window.contentHGroup;	}
			
			override public function set visible(value:Boolean):void
			{
				if(value == true)
				{
					if(contentHGroup.getElementAt(0) != this)
						contentHGroup.addElementAt(this, 0);
				}
				else
				{
					if(contentHGroup.getElementAt(0) == this)
						contentHGroup.removeElementAt(0);
				}
				super.visible = value;
			}
			
		]]>
	</fx:Script>
	
	<ui:VGroup width="100%" height="100%" 
			   padding="5">
		<ui:HGroup width="100%" 
				  horizontalAlign="right">
			<s:Label text="Order by " />
			<s:RadioButton label="Name" 
						   groupName="orderGroup" 
						   value="name"
						   selected="true" />
			<s:RadioButton label="Market Cap." 
						   groupName="orderGroup"
						   value="marketCap"/>
		</ui:HGroup>
		
		<!-- CORPORATE-GRID -->
		<s:BorderContainer width="100%" height="100%">
			<ui:AdvancedDataGrid id="advDg"  
								 dragStart="dragStartHandler(event)"
								 sortableColumns="false" 
								 borderVisible="false"
								 width="100%" height="100%">
				<ui:dataProvider>
					<mx:HierarchicalData source="{arrayCollection}" childrenField="children" />
				</ui:dataProvider>
				<ui:columns>
					<mx:AdvancedDataGridColumn id="nameField"
											   dataField="$name"
											   headerText="Corporate Name" />
					<mx:AdvancedDataGridColumn id="upriseField"
											   dataField="$upriseRatio"
											   headerText="+/-(%)"
											   itemRenderer="org.samchon.ui.label.DataGridColorPercentLabel" 
											   width="60" />
				</ui:columns>
			</ui:AdvancedDataGrid>
		</s:BorderContainer>
		
		<s:HGroup width="100%">
			<s:ComboBox id="field" 
						dataProvider="{fieldList}" 
						selectedIndex="0" 
						width="90" />
			<s:TextInput id="value" 
						 width="100%" />
			<s:Button icon="assets/icons/lens16.png"
					  label="Find" 
					  click="goCorporateList(field.selectedItem.data, value.text)"
					  width="70"/>
		</s:HGroup>
	</ui:VGroup>
</s:Panel>

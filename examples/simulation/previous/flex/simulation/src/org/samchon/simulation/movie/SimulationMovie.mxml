<?xml version="1.0" encoding="utf-8"?>
<movie:InquiryMovie xmlns:fx="http://ns.adobe.com/mxml/2009"
					xmlns:s="library://ns.adobe.com/flex/spark"
					xmlns:mx="library://ns.adobe.com/flex/mx"
					xmlns:movie="org.samchon.simulation.movie.*"
					xmlns:boundary="org.samchon.simulation.simulation.abstract.boundary.*"
					currentState="SIMULATION_STATE">
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	
	<movie:states>
		<s:State name="INTERACTION_STATE" />
		<s:State name="PROGRAMMING_STATE" />
		<s:State name="NAMTREE_STATE" />
		<s:State name="SIMULATION_STATE" />
	</movie:states>
	
	<fx:Script>
		<![CDATA[
			import mx.events.FlexEvent;
			import mx.events.Request;
			import mx.events.StateChangeEvent;
			import mx.managers.PopUpManager;
			
			import org.samchon.simulation.accessory.InquiryProgressMovie;
			import org.samchon.simulation.simulation.backtesting.boundary.BTNamTreeBoundary;
			import org.samchon.simulation.menu.SimulationMenu;
			import org.samchon.simulation.simulation.retrieve.CorporateList;
			import org.samchon.simulation.simulation.abstract.boundary.SMBoundary;
			import org.samchon.simulation.simulation.abstract.boundary.SMProgrammingBoundary;
			import org.samchon.simulation.simulation.abstract.request.SMRequestParameter;
			import org.samchon.simulation.simulation.abstract.request.SMRequestWindow;
			import org.samchon.simulation.simulation.abstract.result.SMResultMovie;
			import org.samchon.simulation.worker.SimulationWorker;
				
			//MEMBER POINTER
			public function get simulationWorker():SimulationWorker	{	return worker as SimulationWorker;	}
			
			/* --------------------------------------------------------------------------------------------------------
				RESULT MOVIE AND ITS CONSTRUCTOR
			-------------------------------------------------------------------------------------------------------- */
			public var programmingBoundary:SMProgrammingBoundary;
			public var namTreeBoundary:BTNamTreeBoundary;
			public var resultMovie:SMResultMovie;
			
			protected function getNewResultMovie():SMResultMovie			{	return new SMResultMovie();		}
			protected function getNewNamTreeBoundary():BTNamTreeBoundary			{	return null;						}
			protected function getNewProgrammingBoundary():SMProgrammingBoundary	{	return new SMProgrammingBoundary();	}
			
			/* --------------------------------------------------------------------------------------------------------
				CONSTRUCTOR
			-------------------------------------------------------------------------------------------------------- */
			override protected function creationCompleted(event:FlexEvent):void
			{
				super.creationCompleted(event);
				corporateGrid.allowMultipleSelection = true;
				
				this.addEventListener(StateChangeEvent.CURRENT_STATE_CHANGE, handleStateChanged);
			}
			protected function programmingGroupCreated(event:FlexEvent):void
			{
				programmingGroup.removeEventListener(FlexEvent.CREATION_COMPLETE, programmingGroupCreated);
				
				programmingBoundary = getNewProgrammingBoundary();
				if(programmingBoundary == null)
					return;
				
				programmingBoundary.percentWidth = 100;
				programmingBoundary.percentHeight = 100;
				
				programmingGroup.addElement( programmingBoundary );
			}
			protected function namTreeGroupCreated(event:FlexEvent):void
			{
				namTreeGroup.removeEventListener(FlexEvent.CREATION_COMPLETE, namTreeGroupCreated);
				
				namTreeBoundary = getNewNamTreeBoundary();
				if(namTreeBoundary == null)
					return;
				
				namTreeBoundary.percentWidth = 100;
				namTreeBoundary.percentHeight = 100;
				
				namTreeGroup.addElement( namTreeBoundary );
			}
			protected function resultGroupCreated(event:FlexEvent):void
			{
				resultGroup.removeEventListener(FlexEvent.CREATION_COMPLETE, resultGroupCreated);
				
				resultMovie = getNewResultMovie();
				resultMovie.movie = this;
				resultMovie.percentWidth = 100;
				resultMovie.percentHeight = 100;
				
				resultGroup.addElement( resultMovie );
			}
			protected function handleStateChanged(event:StateChangeEvent):void
			{
				corporateGrid.visible = (this.currentState == "SIMULATION_STATE");
				
				if(this.currentState == "INTERACTION_STATE")
					boundaryType = BOUNDARY_INTERACTION;
				else if(this.currentState == "PROGRAMMING_STATE")
					boundaryType = BOUNDARY_PROGRAMMING;
				else if(this.currentState == "NAMTREE_STATE")
					boundaryType = BOUNDARY_NAMTREE;
			}
			
			//DETERMINE TYPE OF BOUNDARY
			protected var boundaryType:int = Global.NULL;
			
			public static const BOUNDARY_INTERACTION:int = 1;
			public static const BOUNDARY_PROGRAMMING:int = 2;
			public static const BOUNDARY_NAMTREE:int = 3;
			
			public function getBoundaryType():int	{	return this.boundaryType;	}
			public function getBoundary():SMBoundary
			{
				if(boundaryType == BOUNDARY_INTERACTION)
					return null;
				else if(boundaryType == BOUNDARY_PROGRAMMING)
					return programmingBoundary;
				else if(boundaryType == BOUNDARY_NAMTREE)
					return namTreeBoundary;
				else
					return null;
			}
			
			/* --------------------------------------------------------------------------------------------------------
				REQUEST
			-------------------------------------------------------------------------------------------------------- */
			protected var progressMovie:InquiryProgressMovie;
			
			protected function get RequestWindow():Class	{	return SMRequestWindow;	}
			
			public function goSimulate(event:MouseEvent):void
			{
				var selectedCorporates:CorporateList = corporateGrid.selectedCorporates;
				if(selectedCorporates.length == 0 || getBoundary() == null)
					return;
				
				//OPEN A NEW REQUEST PARAMETER WINDOW
				var requestWindow:SMRequestWindow = PopUpManager.createPopUp(Root.window, RequestWindow, true) as SMRequestWindow;
				requestWindow.movie = this;
				requestWindow.corporateList = selectedCorporates;
				
				PopUpManager.centerPopUp(requestWindow);
			}
			public function goLoad(parameter:SMRequestParameter):void
			{
				progressMovie = PopUpManager.createPopUp(Root.window, InquiryProgressMovie, true) as InquiryProgressMovie;
				progressMovie.setComment("Loading Regressive Data ...", "Now fetching regressive data.");
				PopUpManager.centerPopUp(progressMovie);
				
				//WORKER.LOAD -> HISTORY_LIST.LOAD
				simulationWorker.goSimulate(parameter);
			}
			public function setProgress(numerator:int, denominator:int):void
			{
				progressMovie.setProgress(numerator, denominator);
			}
			public function setProgressComment(title:String, comment:String):void
			{
				progressMovie.setComment(title, comment);
			}
			public function closeProgress():void
			{
				progressMovie.close();
			}
			
			/* --------------------------------------------------------------------------------------------------------
				RESULT
			-------------------------------------------------------------------------------------------------------- */
			public function goCompile():void
			{
				//BOUNDARY.GO_COMPILE -> COMPILER.GO_COMPILE
				if(this.boundaryType == BOUNDARY_INTERACTION)
					getBoundary().goCompile();
			}
			public function setResult(xml:XML):void
			{
				resultMovie.setResult(xml);
			}
			
			/* --------------------------------------------------------------------------------------------------------
				FILE HANDLER
			-------------------------------------------------------------------------------------------------------- */
			public function goNewFile(event:MouseEvent):void
			{
				var boundary:* = this.getBoundary();
				if(boundary == null)
					return;
				
				boundary.goNewFile(event);
			}
			public function goOpenFile(event:MouseEvent):void
			{
				var boundary:* = this.getBoundary();
				if(boundary == null)
					return;
				
				boundary.goOpenFile(event);
			}
			public function goSaveFile(event:MouseEvent):void
			{
				var boundary:* = this.getBoundary();
				if(boundary == null)
					return;
				
				boundary.goSaveFile(event);
			}
			
		]]>
	</fx:Script>
	
	<!-- 
	*****************************************************************
	CONTENTS OF INTERACTION
	*****************************************************************
	-->
	
	<!-- 
	*****************************************************************
	CONTENTS OF PROGRAMMING
	*****************************************************************
	-->
	<s:Group id="programmingGroup" 
			 includeIn="PROGRAMMING_STATE" 
			 creationComplete="programmingGroupCreated(event)"
			 width="100%" height="100%" />
	
	<!-- 
	*****************************************************************
	CONTENTS OF NAM-TREE
	*****************************************************************
	-->
	<s:Group id="namTreeGroup" 
			 includeIn="NAMTREE_STATE" 
			 creationComplete="namTreeGroupCreated(event)"
			 width="100%" height="100%" />
	
	<!-- 
	*****************************************************************
	CONTENTS OF RESULT
	*****************************************************************
	-->
	<s:Group id="resultGroup"
			 includeIn="SIMULATION_STATE" 
			 creationComplete="resultGroupCreated(event)"
			 width="100%" height="100%" />
	
</movie:InquiryMovie>

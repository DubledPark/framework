<?xml version="1.0" encoding="utf-8"?>
<mx:HDividedBox xmlns:fx="http://ns.adobe.com/mxml/2009" 
				xmlns:s="library://ns.adobe.com/flex/spark" 
				xmlns:mx="library://ns.adobe.com/flex/mx" 
				
				creationComplete="creationCompleted(event)" xmlns:ui="org.samchon.ui.*" xmlns:plot="org.samchon.simulation.simulation.backtesting.result.comparison.plot.*">
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	<fx:Script>
		<![CDATA[
			import mx.charts.HitData;
			import mx.charts.chartClasses.IAxis;
			import mx.charts.series.PlotSeries;
			import mx.charts.series.items.PlotSeriesItem;
			import mx.collections.ArrayCollection;
			import mx.collections.XMLListCollection;
			import mx.controls.Alert;
			import mx.controls.advancedDataGridClasses.AdvancedDataGridColumnGroup;
			import mx.events.CollectionEvent;
			import mx.events.FlexEvent;
			import mx.events.ListEvent;
			
			import org.samchon.format.Format;
			import org.samchon.simulation.simulation.backtesting.history.BTHistoryArray;
			import org.samchon.simulation.simulation.backtesting.history.algorithm.BTAlgorithm;
			import org.samchon.simulation.simulation.backtesting.result.comparison.plot.BTPlotTarget;
			import org.samchon.simulation.simulation.backtesting.result.comparison.plot.BTPlotTargetList;
			import org.samchon.ui.label.DataGridColorPercentLabel;
			
			[Bindable]protected var xmlListCollection:XMLListCollection;
			[Bindable]protected var plotTargetList:BTPlotTargetList;
			[Bindable]protected var plotXMLListCollection:XMLListCollection;
			
			protected var historyArray:BTHistoryArray;
			[Bindable]public static var algorithmList:AlgorithmList;
			protected static const classFactory:ClassFactory	=	new ClassFactory(DataGridColorPercentLabel);
			
			protected function creationCompleted(event:FlexEvent):void
			{
				this.removeEventListener(FlexEvent.CREATION_COMPLETE, creationCompleted);
				
				xmlListCollection = new XMLListCollection( historyArray.toComparisonXML().comparison );
				plotTargetList = new BTPlotTargetList();
				plotXMLListCollection = new XMLListCollection();
				
				plotTargetList.addItem( new BTPlotTarget(algorithmList) );
				plotTargetList.addItem( new BTPlotTarget(algorithmList, 0, 1, 0, 3) );
				handlePlotTargetChanged(null);
				
				plotTargetList.addEventListener(CollectionEvent.COLLECTION_CHANGE, handlePlotTargetChanged);
			}
			public function setHistoryArray(historyArray:BTHistoryArray):void
			{
				this.historyArray = historyArray;
				algorithmList = historyArray.getAlgorithmList();
			}
			
			/* -----------------------------------------------------------------------
				RETURN_GRID
			----------------------------------------------------------------------- */
			protected function returnGridCreationCompleted(event:FlexEvent):void
			{
				// TODO Auto-generated method stub
				var groupedColumns:Array = [ returnGrid.groupedColumns[0] ];
				
				var algorithmColumnGroup:AdvancedDataGridColumnGroup;
				var tradeTypeColumnGroup:AdvancedDataGridColumnGroup;
				var tradeTypeTitle:String;
				var rr:AdvancedDataGridColumn;
				var rry:AdvancedDataGridColumn;
				var i:int;
				var j:int;
				
				for(i = 0; i < algorithmList.length; i++)
				{
					algorithmColumnGroup = new AdvancedDataGridColumnGroup();
					algorithmColumnGroup.headerText = algorithmList.at(i).getName();
					
					for(j = 0; j < 2; j++)
					{
						tradeTypeTitle = (i == 0) ?  "Real" : "Paper";
						tradeTypeColumnGroup = new AdvancedDataGridColumnGroup();
						tradeTypeColumnGroup.headerText = tradeTypeTitle;
						
						rr = new AdvancedDataGridColumn("@" + tradeTypeTitle.toLowerCase() + "SimpleReturn" + i);
						rr.headerText = "Return Rate";
						rr.itemRenderer = classFactory;
						
						rry = new AdvancedDataGridColumn("@" + tradeTypeTitle.toLowerCase() + "YearReturn" + i);
						rry.headerText = "RR% / 1Y";
						rry.itemRenderer = classFactory;
						
						tradeTypeColumnGroup.children = [rr, rry];
						algorithmColumnGroup.children.push(tradeTypeColumnGroup);
					}
					groupedColumns.push( algorithmColumnGroup );
				}
				returnGrid.groupedColumns = groupedColumns;
			}
			
			/* -----------------------------------------------------------------------
				PLOT_CHART
			----------------------------------------------------------------------- */
			public static const returnTypeList:ArrayCollection = 
				new ArrayCollection
				([
					{label: "Real Return"},
					{label: "Real HPR"},
					{label: "Paper Return"},
					{label: "Paper HPR"}
				]);
			
			protected function handlePlotTargetChanged(event:CollectionEvent):void
			{
				var series:Array = [];
				for(var i:int = 0; i < plotTargetList.length; i++)
					series.push( plotTargetList.at(i).getPlotSeries(i) );
				
				plotChart.series = series;
				plotXMLListCollection.source = historyArray.toPlotXML(this.plotTargetList).plot;
			}
			
			/* -----------------------------------------------------------------------
				PLOT_CHART_FORMAT
			----------------------------------------------------------------------- */
			protected function linearAxisLabelFunction(item:Object, prevValue:Object, axis:IAxis):String 
			{
				var value:String = Format.percentFormat( Number(item) );
				return value;
			}
			protected function columnDataTipFunction(hitData:HitData):String {
				var plotSeries:PlotSeries = hitData.element as PlotSeries;
				var plotSeriesItem:PlotSeriesItem = hitData.chartItem as PlotSeriesItem;
				
				var value:String = "<b>" + hitData.item.@name + "(" + hitData.item.@code + ")</b>\n";
				value += plotSeries.displayName + "\n";
				value += "	= " + Format.percentFormat(plotSeriesItem.xNumber) + Format.percentFormat(plotSeriesItem.yNumber);
				
				return value;
			}
			
			protected function goAddTarget(event:MouseEvent):void
			{
				// TODO Auto-generated method stub
				plotTargetList.addItem( new BTPlotTarget(algorithmList) );
			}
			protected function goDeleteTarget(event:MouseEvent):void
			{
				// TODO Auto-generated method stub
				var idx:int = targetGrid.selectedIndex;
				if(idx == -1)
					return;
				plotTargetList.removeItemAt( idx );
			}
			/*
			protected function goCompareWindow(event:ListEvent):void
			{
				// TODO Auto-generated method stub
				var selectedItem:Object = returnGrid.selectedItem;
				var index:int = selectedItem.@index;
				
				var title:String = "Back-testing return comparison: " + selectedItem.@name;
				var xml:String = historyArray.toComparisonReturnXMLAt(index);
				
				trace(xml);
				//ExternalInterface.call("openBTCompareWindow", title, xml);
			}
			*/
		]]>
	</fx:Script>
	<!-- ************************************************************
		RETURN_GRID
	************************************************************* -->
	<mx:AdvancedDataGrid id="returnGrid" 
						 creationComplete="returnGridCreationCompleted(event)"
						 
						 doubleClickEnabled="true"
						 sortableColumns="false" sortExpertMode="true"
						 variableRowHeight="true"
						 horizontalScrollPolicy="on" 
						 lockedColumnCount="1"
						 width="60%" height="100%">
		
		<mx:dataProvider>
			<mx:HierarchicalData source="{xmlListCollection}" />
		</mx:dataProvider>
		<mx:groupedColumns>
			<mx:AdvancedDataGridColumn headerText="Corporate Name" 
									   width="200" dataField="@name" 
									   itemRenderer="org.samchon.ui.label.DataGridCompanyLabel" />
		</mx:groupedColumns>
		<mx:rendererProviders>            
			<mx:AdvancedDataGridRendererProvider 
				renderer="org.samchon.simulation.simulation.backtesting.result.comparison.BTComparisonChart"
				dataField="index" 
				columnIndex="1" columnSpan="0"/>         
		</mx:rendererProviders>
	</mx:AdvancedDataGrid>
	
	<!-- ************************************************************
		PLOT_CHART
	************************************************************* -->
	<ui:VGroup width="40%" height="100%">
		<mx:AdvancedDataGrid id="targetGrid" 
							 dataProvider="{plotTargetList}"
							 sortableColumns="false" sortExpertMode="true" 
							 allowMultipleSelection="true"
							 editable="true"
							 horizontalScrollPolicy="off" verticalScrollPolicy="off"
							 
							 width="100%" 
							 height="{45 + (plotTargetList.length + 1) * 23}">
			<mx:groupedColumns>
				<mx:AdvancedDataGridColumn headerText="Name" dataField="$name" editable="false" />
				<mx:AdvancedDataGridColumnGroup headerText="X - Axis" editable="true">
					<mx:AdvancedDataGridColumn headerText="Algorithm" 
											   dataField="algX"
											   rendererIsEditor="true">
						<mx:itemRenderer>
							<fx:Component>
								<plot:BTPlotComBoBox dataProvider="{BTComparisonMovie.algorithmList}" 
													 labelField="$name" dataField="algX" />
							</fx:Component>
						</mx:itemRenderer>
					</mx:AdvancedDataGridColumn>
					<mx:AdvancedDataGridColumn headerText="Return Type" 
											   dataField="returnX"
											   rendererIsEditor="true">
						<mx:itemRenderer>
							<fx:Component>
								<plot:BTPlotComBoBox dataProvider="{BTComparisonMovie.returnTypeList}" 
													 labelField="label" dataField="returnX" />
							</fx:Component>
						</mx:itemRenderer>
					</mx:AdvancedDataGridColumn>
				</mx:AdvancedDataGridColumnGroup>
				<mx:AdvancedDataGridColumnGroup headerText="Y - Axis" editable="true">
					<mx:AdvancedDataGridColumn headerText="Algorithm" 
											   dataField="algY"
											   rendererIsEditor="true">
						<mx:itemRenderer>
							<fx:Component>
								<plot:BTPlotComBoBox dataProvider="{BTComparisonMovie.algorithmList}" 
													 labelField="$name" dataField="algY" />
							</fx:Component>
						</mx:itemRenderer>
					</mx:AdvancedDataGridColumn>
					<mx:AdvancedDataGridColumn headerText="Return Type" 
											   dataField="returnY"
											   rendererIsEditor="true">
						<mx:itemRenderer>
							<fx:Component>
								<plot:BTPlotComBoBox dataProvider="{BTComparisonMovie.returnTypeList}" 
													 labelField="label" dataField="returnY" />
							</fx:Component>
						</mx:itemRenderer>
					</mx:AdvancedDataGridColumn>
				</mx:AdvancedDataGridColumnGroup>
			</mx:groupedColumns>
		</mx:AdvancedDataGrid>
		<s:HGroup width="100%">
			<s:Button label="Refresh" 
					  icon="assets/icons/recycle16.png" 
					  click="handlePlotTargetChanged(null)" />
			<s:Spacer width="100%" />
			<s:Button label="Add" 
					  icon="assets/icons/plus16.png" 
					  click="goAddTarget(event)" />
			<s:Button label="Remove" 
					  icon="assets/icons/trash16.png" 
					  click="goDeleteTarget(event)"/>
		</s:HGroup>
		<mx:PlotChart id="plotChart" 
					  dataProvider="{plotXMLListCollection}"
					  dataTipFunction="columnDataTipFunction" showDataTips="true" dataTipMode="multiple"
					  width="100%" height="100%">
			<mx:horizontalAxis>
				<mx:LinearAxis labelFunction="linearAxisLabelFunction" />
			</mx:horizontalAxis>
			<mx:verticalAxis>
				<mx:LinearAxis labelFunction="linearAxisLabelFunction" />
			</mx:verticalAxis>
		</mx:PlotChart>
		<mx:Legend dataProvider="{plotChart}"
				   direction="horizontal"
				   width="100%" />
	</ui:VGroup>
</mx:HDividedBox>














